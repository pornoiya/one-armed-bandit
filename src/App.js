import './App.css';
import RepeatButton from "./components/RepeatButton/RepeatButton";
import React from "react";
import Spinner from "./components/Spinner/Spinner";

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      winner: null
    }
    this.finishHandler = this.finishHandler.bind(this)
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    this.setState({ winner: null });
    this.emptyArray();
    this._child1.forceUpdateHandler();
    this._child2.forceUpdateHandler();
    this._child3.forceUpdateHandler();
  }

  static loser = [
    '—Ç–∞–∫–æ–µ –æ–æ–æ –ø—Ä–æ–≥–æ—Ä–∏—Ç',
    '–Ω–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤',
    '–±–µ–∑–≤–∫—É—Å–Ω–æ',
    '–Ω–µ –∑–≤—É—á–∏—Ç',
    '—É–∂–µ –±–ª–∏–∂–µ',
    '—Å–ª–∏—à–∫–æ–º –ø–∞—Ñ–æ—Å–Ω–æ',
    '—É —Ç–∞–∫–æ–≥–æ –æ–æ–æ –æ—Ç–∑–æ–≤—É—Ç –ª–∏—Ü–µ–Ω–∑–∏—é',
    '–Ω–µ –æ—á–µ–Ω—å –∫–ª–∏–µ–Ω—Ç–æ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ',
    '–Ω—É –ø–æ—á—Ç–∏...',
    '–≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –Ω–∞–π–º—É –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞'
  ];

  static matches = [];

  finishHandler(value) {
    App.matches.push(value);

    if (App.matches.length === 3) {
      const { winner } = this.state;
      const first = App.matches[0];
      let results = App.matches.every(match => match === first)
      this.setState({ winner: results });
    }
  }

  emptyArray() {
    App.matches = [];
  }

  render() {
    const { winner } = this.state;
    const getLoser = () => {
      return App.loser[Math.floor(Math.random()*App.loser.length)]
    }
    let repeatButton = null;
    let winningSound = null;

    if (winner !== null) {
      repeatButton = <RepeatButton onClick={this.handleClick} />
    }

    if (winner) {
      winningSound = <>
        <div>FLAG: POWER_OF_NAME</div>
        <div className={"won"} />
      </>
    }

    return (
        <div className={"App"}>
          {winningSound}
          {! winningSound ? <h1 className={"title"}>–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–æ–æ</h1> : null}
          <div className={`spinner-container`}>
            <Spinner onFinish={this.finishHandler} ref={(child) => { this._child1 = child; }} timer="0" />
            <Spinner onFinish={this.finishHandler} ref={(child) => { this._child2 = child; }} timer="0" />
            <Spinner onFinish={this.finishHandler} ref={(child) => { this._child3 = child; }} timer="0" />
            {winner === null ? <div className="gradient-fade" /> : <div className="gradient-fade green" />}
          </div>
          <h1 className={"status"}>
            <span className={"message"}>
              {winner === null ? '–ø–æ—Å–º–æ—Ç—Ä–∏–º‚Ä¶' : winner ? 'ü§ë –≥–µ–Ω–∏–∞–ª—å–Ω–æ! ü§ë' : getLoser()}
            </span>
          </h1>
          {repeatButton}
        </div>
    );
  }
}

export default App;
